import logging
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

PRIZE, DESCRIPTION, WINNERS_COUNT, DURATION, CHANNEL = range(5)

giveaways = {}
participants = {}

async def is_channel_admin(bot, user_id, channel_id):
    try:
        chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        return chat_member.status in ['administrator', 'creator']
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        keyboard = [
            [InlineKeyboardButton("üéÅ –ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="start_giveaway")],
            [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", callback_data="create_in_channel")]
        ]
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def create_in_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:")
    context.user_data['in_channel'] = True
    return PRIZE

async def start_giveaway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:")
    context.user_data['in_channel'] = False
    return PRIZE

async def receive_prize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['prize'] = update.message.text
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
    return DESCRIPTION

async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    await update.message.reply_text(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30s, 5m, 1h, 2d):\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "s - —Å–µ–∫—É–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 30s)\n"
        "m - –º–∏–Ω—É—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 5m)\n"
        "h - —á–∞—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 1h)\n"
        "d - –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2d)"
    )
    return DURATION

async def receive_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    duration_str = update.message.text.lower()
    
    try:
        if not duration_str[:-1].isdigit():
            raise ValueError
        
        unit = duration_str[-1]
        value = int(duration_str[:-1])
        
        if unit not in ['s', 'm', 'h', 'd']:
            raise ValueError
        
        if unit == 's':
            duration = timedelta(seconds=value)
        elif unit == 'm':
            duration = timedelta(minutes=value)
        elif unit == 'h':
            duration = timedelta(hours=value)
        elif unit == 'd':
            duration = timedelta(days=value)
        
        context.user_data['end_time'] = datetime.now() + duration

        if context.user_data.get('in_channel', False):
            await update.message.reply_text("üì¢ –í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä @my_channel):")
            return CHANNEL
        else:
            await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:")
            return WINNERS_COUNT
    
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "30s (30 —Å–µ–∫—É–Ω–¥), 5m (5 –º–∏–Ω—É—Ç), 1h (1 —á–∞—Å) –∏–ª–∏ 2d (2 –¥–Ω—è)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return DURATION

async def receive_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel_username = update.message.text.strip('@')
    context.user_data['channel'] = channel_username
    
    try:
        chat = await context.bot.get_chat(f"@{channel_username}")
        context.user_data['channel_id'] = chat.id
        
        if not await is_channel_admin(context.bot, update.message.from_user.id, chat.id):
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!")
            return ConversationHandler.END
            
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:")
        return WINNERS_COUNT
    except Exception as e:
        logger.error(f"Error getting channel info: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        return ConversationHandler.END

async def receive_winners_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        winners_count = int(update.message.text)
        if winners_count <= 0:
            raise ValueError
        
        giveaway_id = random.randint(1000, 9999)
        creator = update.message.from_user
        
        giveaways[giveaway_id] = {
            'prize': context.user_data['prize'],
            'description': context.user_data['description'],
            'winners_count': winners_count,
            'creator_id': creator.id,
            'end_time': context.user_data['end_time'],
            'message_id': None,
            'channel_id': context.user_data.get('channel_id'),
            'active': True
        }
        participants[giveaway_id] = []
        
        time_left = giveaways[giveaway_id]['end_time'] - datetime.now()
        time_str = format_time_left(time_left)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway_id}")]
        ]
        
        if context.user_data.get('in_channel', False):
            channel_username = context.user_data.get('channel', '')
            try:
                message = await context.bot.send_message(
                    chat_id=giveaways[giveaway_id]['channel_id'],
                    text=f"üéâ <b>–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!</b>\n\n"
                         f"üéÅ –ü—Ä–∏–∑: {giveaways[giveaway_id]['prize']}\n"
                         f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {giveaways[giveaway_id]['description']}\n"
                         f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaways[giveaway_id]['winners_count']}\n"
                         f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {time_str}\n"
                         f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
                giveaways[giveaway_id]['message_id'] = message.message_id
                
                await update.message.reply_text(f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
                return ConversationHandler.END
        else:
            message = await update.message.reply_text(
                f"üéâ <b>–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!</b>\n\n"
                f"üéÅ –ü—Ä–∏–∑: {giveaways[giveaway_id]['prize']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {giveaways[giveaway_id]['description']}\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaways[giveaway_id]['winners_count']}\n"
                f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {time_str}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            giveaways[giveaway_id]['message_id'] = message.message_id
        
        asyncio.create_task(end_giveaway_after_time(context, giveaway_id))
        
        return ConversationHandler.END
    
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return WINNERS_COUNT

def format_time_left(time_left):
    hours, remainder = divmod(time_left.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    time_str = ""
    if time_left.days > 0:
        time_str += f"{time_left.days} –¥. "
    if hours > 0:
        time_str += f"{hours} —á. "
    if minutes > 0:
        time_str += f"{minutes} –º–∏–Ω. "
    if seconds > 0:
        time_str += f"{seconds} —Å–µ–∫."
    return time_str

async def end_giveaway_after_time(context: ContextTypes.DEFAULT_TYPE, giveaway_id: int):
    try:
        giveaway = giveaways.get(giveaway_id)
        if not giveaway:
            return
        
        time_left = (giveaway['end_time'] - datetime.now()).total_seconds()
        if time_left > 0:
            await asyncio.sleep(time_left)
        
        giveaway = giveaways.get(giveaway_id)
        if not giveaway or not giveaway['active']:
            return
        
        part = participants.get(giveaway_id, [])
        
        if len(part) >= giveaway['winners_count']:
            winners = random.sample(part, giveaway['winners_count'])
            winners_text = "\n".join(
                f"{i+1}. @{w['username']}" if w['username'] else f"{i+1}. {w['first_name']} (ID: {w['id']})"
                for i, w in enumerate(winners)
            )
            
            result_message = (
                f"üéâ <b>–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(part)}\n\n"
                f"üèÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_text}"
            )
            result_to_creator = (
                f"üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n\n"
                f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(part)}\n\n"
                f"üèÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_text}"
            )
        else:
            result_message = (
                f"üéâ <b>–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(part)}\n\n"
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
            )
            result_to_creator = (
                f"üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n\n"
                f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(part)}\n\n"
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
            )
        
        try:
            if giveaway.get('channel_id'):
                await context.bot.edit_message_text(
                    chat_id=giveaway['channel_id'],
                    message_id=giveaway['message_id'],
                    text=result_message,
                    parse_mode='HTML'
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=giveaway['creator_id'],
                    message_id=giveaway['message_id'],
                    text=result_message,
                    parse_mode='HTML'
                )
            
            await context.bot.send_message(
                chat_id=giveaway['creator_id'],
                text=result_to_creator,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        
        giveaway['active'] = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ end_giveaway_after_time: {e}")

async def join_giveaway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    giveaway_id = int(query.data.split('_')[1])
    user = query.from_user
    
    if giveaway_id not in giveaways or not giveaways[giveaway_id]['active']:
        await query.answer("‚ùå –≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)
        return
    
    if datetime.now() > giveaways[giveaway_id]['end_time']:
        await query.answer("‚ùå –í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏—Å—Ç–µ–∫–ª–æ!", show_alert=True)
        return
    
    if user.id not in [p['id'] for p in participants[giveaway_id]]:
        participants[giveaway_id].append({
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name
        })
        
        giveaway = giveaways[giveaway_id]
        time_left = giveaway['end_time'] - datetime.now()
        time_str = format_time_left(time_left)
        
        try:
            if giveaway.get('channel_id'):
                await context.bot.edit_message_text(
                    chat_id=giveaway['channel_id'],
                    message_id=giveaway['message_id'],
                    text=f"üéâ <b>–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!</b>\n\n"
                         f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                         f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {giveaway['description']}\n"
                         f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaway['winners_count']}\n"
                         f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {time_str}\n"
                         f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants[giveaway_id])}",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway_id}")]
                    ])
                )
            else:
                await query.edit_message_text(
                    text=f"üéâ <b>–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!</b>\n\n"
                         f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                         f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {giveaway['description']}\n"
                         f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaway['winners_count']}\n"
                         f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {time_str}\n"
                         f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants[giveaway_id])}",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway_id}")]
                    ])
                )
            
            await context.bot.send_message(
                chat_id=user.id,
                text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def draw_winners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    giveaway_id = int(query.data.split('_')[1])
    
    if giveaway_id not in giveaways or not giveaways[giveaway_id]['active']:
        await query.answer("‚ùå –≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)
        return
    
    giveaway = giveaways[giveaway_id]
    
    if giveaway.get('channel_id'):
        is_admin = await is_channel_admin(context.bot, query.from_user.id, giveaway['channel_id'])
    else:
        is_admin = query.from_user.id == giveaway['creator_id']
    
    if not is_admin:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à!", show_alert=True)
        return
    
    part = participants[giveaway_id]
    
    if len(part) < giveaway['winners_count']:
        await query.answer(f"‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {giveaway['winners_count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return
    
    winners = random.sample(part, giveaway['winners_count'])
    winners_text = "\n".join(
        f"{i+1}. @{w['username']}" if w['username'] else f"{i+1}. {w['first_name']} (ID: {w['id']})"
        for i, w in enumerate(winners)
    )
    
    result_message = (
        f"üéâ <b>–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(part)}\n\n"
        f"üèÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_text}"
    )
    
    try:
        if giveaway.get('channel_id'):
            await context.bot.edit_message_text(
                chat_id=giveaway['channel_id'],
                message_id=giveaway['message_id'],
                text=result_message,
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(
                text=result_message,
                parse_mode='HTML'
            )
        
        await context.bot.send_message(
            chat_id=giveaway['creator_id'],
            text=f"üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n\n"
                 f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                 f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(part)}\n\n"
                 f"üèÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_text}",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
    
    giveaway['active'] = False

def main():
    application = ApplicationBuilder().token("YOUR_BOT_TOKEN").build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_giveaway, pattern='^start_giveaway$'),
            CallbackQueryHandler(create_in_channel, pattern='^create_in_channel$')
        ],
        states={
            PRIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_prize)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)],
            DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_duration)],
            CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_channel)],
            WINNERS_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_winners_count)]
        },
        fallbacks=[]
    )
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(join_giveaway, pattern='^join_'))
    application.add_handler(CallbackQueryHandler(draw_winners, pattern='^draw_'))
    
    application.run_polling()

if __name__ == '__main__':
    main()